{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "adec2752",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ">1 f([0.77362387]) = 0.59849\n",
      ">2 f([0.56087731]) = 0.31458\n",
      ">3 f([0.38487788]) = 0.14813\n",
      ">4 f([0.25510247]) = 0.06508\n",
      ">5 f([0.16514936]) = 0.02727\n",
      ">6 f([0.10513355]) = 0.01105\n",
      ">7 f([0.0661021]) = 0.00437\n",
      ">8 f([0.04117224]) = 0.00170\n",
      ">9 f([0.02545884]) = 0.00065\n",
      ">10 f([0.01565305]) = 0.00025\n",
      ">11 f([0.0095807]) = 0.00009\n",
      ">12 f([0.00584286]) = 0.00003\n",
      ">13 f([0.00355293]) = 0.00001\n",
      ">14 f([0.00215537]) = 0.00000\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#GD with momentum for X^2 function\n",
    "\n",
    "from numpy import asarray\n",
    "from numpy import arange\n",
    "from numpy.random import rand\n",
    "from numpy.random import seed\n",
    "from matplotlib import pyplot\n",
    "\n",
    "def objective(x):\n",
    "    return x**2.0\n",
    "\n",
    "def derivative(x):\n",
    "    return x * 2.0\n",
    "\n",
    "def gradient_descent(objective, derivative, bounds, n_iter, step_size, momentum):\n",
    "  solutions, scores = list(), list()\n",
    "  solution = bounds[:, 0] + rand(len(bounds)) * (bounds[:, 1] - bounds[:, 0])\n",
    "  change = 0.0;\n",
    "  prev_score = 0;\n",
    "  curr_score=1;\n",
    "  i=0;\n",
    "  while abs(prev_score - curr_score) > 0.001 :\n",
    "    prev_score=change\n",
    "    gradient = derivative(solution)\n",
    "    new_change = step_size * gradient + momentum * change\n",
    "    solution = solution - new_change\n",
    "    change =new_change\n",
    "    curr_score=change\n",
    "    solution_eval = objective(solution)\n",
    "    solutions.append(solution)\n",
    "    scores.append(solution_eval)\n",
    "    i+=1\n",
    "    print('>%d f(%s) = %.5f' % (i, solution, solution_eval))\n",
    "  return [solutions, scores]\n",
    "\n",
    "seed(4)\n",
    "bounds = asarray([[0, 1.0]])\n",
    "n_iter = 20\n",
    "step_size = 0.1\n",
    "momentum = 0.3\n",
    "solutions, scores = gradient_descent(objective, derivative, bounds, n_iter, step_size, momentum)\n",
    "inputs = arange(0, 1.1, 0.1)\n",
    "results = objective(inputs)\n",
    "\n",
    "pyplot.plot(inputs, results)\n",
    "pyplot.plot(solutions, scores, '.-', color='red')\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a6959803",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bounds[:, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6d6477b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
